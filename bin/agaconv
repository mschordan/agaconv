#!/bin/sh

##########################################################################
# AGAConv - CDXL video converter for Commodore-Amiga computers           #
# (C) Copyright 2019-2021 Markus Schordan                                #
##########################################################################
# This program is free software: you can redistribute it and/or modify   #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# This program is distributed in the hope that it will be useful,        #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with this program.  If not, see <https://www.gnu.org/licenses/>. #
#                                                                        #
# Additional permission under GNU GPL version 3 section 7: If you        #
# modify this Program, or any covered work, by linking or combining it   #
# with ham_convert (or a modified version of that library),              #
# containing parts covered by the terms of ham_convert's freeware        #
# license, the licensor of this Program grants you additional permission #
# to convey the resulting work.                                          #
# See: https://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs  #
##########################################################################

##########################################################################
# Summary: Script to extract frames with ffmpeg, convert frame files     #
# with ffmpeg or ham_convert, and encode CDXL videos with agaconv.       #
##########################################################################

# exit on any error in script
set -e

agaconvVersion=0.9.7

LC_NUMERIC=POSIX

#default valuess
maxColors=256
colorMode=normal
screenMode=lores
scaleFactor=0
framesPerSecond=0
maxFramesPerSecond=25
frequency=28000
audioMode=stereo
width=320 
height=auto # height is computed based on other parameters
inputFileName=""
outputFileName=""
audioOutFile=""
tmpDir=""

fixedFrameDigits=4
firstFrameNumber=0001

variableLengthFrames=yes

skipFrameExtraction=no
skipFrameConversion=no
monitorMode=keep_ratio

# exits after printing
printCdxlInfo=no
userProvidedFrequency=no
userProvidedFps=no

batchMode=yes
generateInfoFile=no
dryRun=no

stdCdxl=no

conversionToolUserRequested=no

tmpDirType=vp
performCleanup=yes

# default values
ffDitherMode=bayer
ffDitherBayerScale=4

# default values
hcHamQuality=1
hcDitherMode=fs
hcPropagation=5

# default: 5, except ehb: 3 (overridden in cl option handling)
# this option is unset later for HAM8, if selected, because it's not supported.
hcDiversity=5
hcDiversityUserProvided=no

# default: wu, except ham: quant_neu (this overrides it)
hcQuant=wu

FFMPEG_QUIET_OPTIONS_ALL="-y -loglevel panic -hide_banner -nostats"
FFMPEG_QUIET_OPTIONS="-y -hide_banner"

# this option is removed for OCS modes
agaconvEncodeColorOption="--color-bits 24"

quietMode="no"

if hash xvfb-run 2>/dev/null; then
    # only relevant for Windows 10 Ubuntu App using WSL1
    SERVER_COMMAND="xvfb-run -a"
    XVFB_INSTALLED=yes
else
    SERVER_COMMAND=""
    XVFB_INSTALLED=no
fi

# request initial 500 MiB heap size, maximum 2 GiB heap size memory for the Java virtual machine (only relevant when using ham_convert)
# java -X to print all -X options, -X options are non-standard and subject to change without notice
JVM_MEMORY_OPTIONS="-Xms500m -Xmx2g"

function PrintHelpMessage {
    echo "Usage: ./agaconv INPUTFILE OUTPUTFILE OPTIONS"
    echo
    echo " Required arguments:"
    echo "  INPUTFILE (name of input file (any format that ffmpeg can process))"
    echo "  OUTPUTFILE (name of output CDXL file)"
    echo ""
    echo " OPTIONS:"
    echo "  [--fps=NUMBER] (frames per second, default: 25)"
    echo "  [--color-mode=aga8|...|aga3|ham8|ham6|ehb|ocs5|ocs4|ocs3] (default: aga8)"
    echo "  [--screen-mode=lores|hires|superhires] (default: lores)"
    echo "  [--monitor-mode=amiga|keep_ratio|fill1080|fill1200] (default: amiga)"
    echo "  [--width=NUMBER] (default: 320)"
    echo "  [--height=auto|NUMBER] (default: auto)"
    echo "  [--audio-mode=mono|stereo] (default: stereo)"
    echo "  [--frequency=NUMBER] (default: 28000)"
    echo "  [--dither=none|fs|bayer] (default: bayer (ffmpeg), fs (ham_convert)"
    echo "  [--std-cdxl] generate standard CDXL file with 12-bit color palette and fixed frame size"
    echo "  [--info] show information about CDXL file INPUTFILE"
    echo "  [--help-extra] additional options (mostly used for testing)"
    echo "  [--quiet] no output during conversion"
    echo "  [--version] print agaconv version"
    echo
}

function PrintHelpExtraMessage {
    echo " Testing/developer options:"
    echo "  [--std-cdxl24] generate standard CDXL file with 24-bit RGB888 color palette and fixed frame size"
    echo "  [--scale-factor=NUMBER] (forces this factor, ignores monitor-mode)"
    echo "  [--max-fps=NUMBER] (uses input video fps or max fps (whatever is lower), default: 25)"
    echo "  [--max-colors=NUMBER] (default: 256 (8 planes))"
    echo "  [--color-bits=12|24] (default: 24 bit AGA colors)"
    echo "  [--ff-bayer-scale=NUMBER] 0..5 (default:4)"
    echo "  [--hc-dither=none|bayer|fs] (default:fs)"
    echo "  [--hc-propagation=NUMBER] 0..100 (default:5)"
    echo "  [--hc-diversity=NUMBER] : 0..9 (default: 5), except ehb:0-6 (default: 3))"
    echo "  [--hc-ham-quality=NUMBER] : 1..4: (default: 1 (fastest))"
    echo "  [--hc-quant=wu|neuquant] (default: wu quantisation)"
    echo "  [--extraction-tool=ffmpeg] (default)"
    echo "  [--conversion-tool=ffmpeg|ham_convert] (default: ffmpeg)"
    echo "  [--cdxl-encoder-tool=agaconv-encode] (default)"
    echo "  [--info-file] (generate conversion info-file OUTPUTFILENAME.txt)"
    echo "  [--fixed-frame-digits=NUMBER] (default: 4)"
    echo "  [--batch-mode=yes|no] (default: yes for ham_convert, otherwise no)"
    echo "  [--tmp-dir-type=(vp|video_properties)|unique|(fn|file_name)] (default: vp)"
    echo "  [--tmp-dir=TEMPORARYDIR] (default: as defined by tmp-dir-type)"
    echo "  [--audio-out=AUDIOFILENAME] (default: TEMPORARYDIR/INPUTFILENAME-AUDIOMODE.raw)"
    echo "  [--skip-frame-extraction] (reuse previously extracted PNG frames)"
    echo "  [--skip-frame-conversion] (reuse previously converted PNG or IFF frames)"
    echo "  [--no-cleanup] do not remove temporary files"
    echo "  [--dry-run] do not perform any actions, only compute values and print"
    echo
}

function printVersion {
echo "AGAConv version $agaconvVersion"
echo "Copyright (C) 2019-2021 Markus Schordan"
echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
echo "This is free software: you are free to change and redistribute it."
echo "There is NO WARRANTY, to the extent permitted by law."
echo "Written by Markus Schordan."
}

function checkHamConvertOutput {
    expectedOutputFile=$1
    if [ ! -f $expectedOutputFile ]; then
        echo "CHECKING ham_convert output: FAILED (file $expectedOutputFile does not exist)"
        echo "Error: ham_convert did not generate any output file."
        if [[ $XVFB_INSTALLED == "no" ]]; then
            echo "On Windows 10 installing 'xvfb' with \"sudo apt install xvfb\" may fix this problem."
            exit 1
        else
            echo "Bailing out."
            exit 1
        fi
    else
        echo "CHECKING ham_convert output: OK"
    fi
}

function log2 {
    local val=$1
    local x=0
    local y=$val
    while [ $y -gt 1 ] ; do
        let x=$x+1
        let y/=2
    done
    echo $x
}

function timeDiff {
    local startTime=$1
    local endTime=$2
    local dt=$(echo "$endTime - $startTime" | bc)
    echo $dt
}

function readableTime {
    local t=$1 # in ms
    local h=$(echo "$t/3600" | bc)
    t=$(echo "$t-3600*$h" | bc)
    local m=$(echo "$t/60" | bc)
    t=$(echo "$t-60*$m" | bc)
    local s=$(echo "$t" | bc)
    local time=`printf "%02dh:%02dm:%04.1fs" $h $m $s`
    echo $time
}

function ExtractVideoData {
    echo "quietMode: $quietMode"
    if [[ "$fixedFrameDigits" == "0" ]]; then
        FRAME_NAME_SUFFIX="frame%d"
        firstFrameNumber=1
    else
        FRAME_NAME_SUFFIX="frame%0${fixedFrameDigits}d"
        firstFrameNumber=$(printf "%0${fixedFrameDigits}d" 1)
    fi
    if [[ "$skipFrameExtraction" == "yes" ]]; then
        echo "Skipping video data extraction."
    else
        # remove all files that may have been generated before
        mkdir -p $tmpDir
        rm -rf $tmpDir/frame*.png

        if [[ "$conversionTool" == "ffmpeg" ]]; then
            # extract resized and paletted PNG video frames with ffmpeg
            if [ $maxColors -lt 4 ]; then
                echo "Error: The maximum number of colors must be at least 2."
                exit 1
            fi
            if [[ "$quietMode" == "no" ]]; then
                echo "Extracting frames from $inputFileName, resizing, and paletting with ${maxColors} colors using ffmpeg"
            fi
            maxColorsCorrected=$(($maxColors-2)) # one for background color, and one for ffmpeg bug
            FFMPEG_COMMAND="ffmpeg -i $inputFileName $FFMPEG_QUIET_OPTIONS -filter_complex \"[0:v] fps=${framesPerSecond},scale=w=${outputVideoWidth}:h=${outputVideoHeight}:sws_flags=lanczos:param0=3:sws_dither=none,split [a][b];[a] palettegen=max_colors=${maxColorsCorrected}:stats_mode=single:reserve_transparent=false [p];[b][p] paletteuse=new=1${ffDitherOptions}\" -y ${tmpDir}/${FRAME_NAME_SUFFIX}.png"
            echo "EXECUTING: $FFMPEG_COMMAND"
            eval ${FFMPEG_COMMAND}
            if [[ "$quietMode" == "no" ]]; then
                echo "Extracted resized and paletted PNG frames as: $tmpDir/frame${firstFrameNumber}.png"
            fi
        else
            # extract resized PNG video frames with ffmpeg
            if [[ "$quietMode" == "no" ]]; then
                echo "Extracting frames from $inputFileName and resizing with ffmpeg"
            fi
            FFMPEG_COMMAND="ffmpeg -i $inputFileName $FFMPEG_QUIET_OPTIONS -filter_complex \"[0:v] fps=${framesPerSecond},scale=w=${outputVideoWidth}:h=${outputVideoHeight}:sws_flags=lanczos:param0=3:sws_dither=none\" -y ${tmpDir}/${FRAME_NAME_SUFFIX}.png"
            echo "EXECUTING: $FFMPEG_COMMAND"
            eval ${FFMPEG_COMMAND}
            if [[ "$quietMode" == "no" ]]; then
                echo "Extracted resized PNG frames as: $tmpDir/frame${firstFrameNumber}.png"
            fi
        fi
    fi
}

function ExtractAudioData {
    # check audio output file name
    if [[ $audioMode != "none" ]]; then
        if [[ -z "$audioOutFile" ]]
        then
            audioOutFile=${tmpDir}/${bareFileName}-$audioMode.raw
        fi
    fi

    case $audioMode in
        mono)
            AUDIO_MODE_OPTION="-ac 1"
            ;;
        stereo)
            AUDIO_MODE_OPTION=""
            ;;
        none)
            echo "Error: no audio mode specified."
            exit
            ;;
        *)
            echo "Error: unsupported audio mode $audioMode."
            exit
    esac

    ffmpeg -i $inputFileName $FFMPEG_QUIET_OPTIONS -ar ${frequency} -f u8 -acodec pcm_u8 $AUDIO_MODE_OPTION $audioOutFile
    if [[ "$quietMode" == "no" ]]; then
        echo "Extracted $audioMode audio file: $audioOutFile"
    fi
}

HAM_CONVERT_VERSION=1.8.1
HAM_CONVERT_PATH="ham_convert"
HAM_CONVERT_JAR="ham_convert_${HAM_CONVERT_VERSION}.jar"

function BatchFileConversion {
    if [[ $conversionTool == "ham_convert" ]] && [[ $batchMode == "yes" ]]; then
        HC_BATCH_FILE=$tmpDir/conversion-frames.txt
        rm -f $HC_BATCH_FILE
        touch $HC_BATCH_FILE
        # generate batch file
        for pngfile in $tmpDir/*.png; do
            echo $pngfile >> $HC_BATCH_FILE
        done
        # invoke ham_convert with batch file now
        if [[ "$hamMode" == "yes" ]] || [[ "$colorMode" == "ehb" ]]; then
            if [[ "$quietMode" == "no" ]]; then
                echo "Converting batch file with '$conversionTool' using color mode '$colorMode'."
                fi
            HAM_CONVERT_COMMAND="$SERVER_COMMAND java $JVM_MEMORY_OPTIONS -jar ./$HAM_CONVERT_PATH/$HAM_CONVERT_JAR $HC_BATCH_FILE $hcColorModeOption $hcExtraOptions $hcAnimOptions"
            echo "EXECUTING: $HAM_CONVERT_COMMAND"
            eval $HAM_CONVERT_COMMAND
        else
            # may add non-ham ocs modes ocs8,16,32 (12-bit color space) later
            case $maxColors in
                256|128|64)
                    if [[ "$quietMode" == "no" ]]; then
                        echo "Converting batch file with '$conversionTool' using "$maxColors" colors (24-bit color space)."
                    fi
                    HAM_CONVERT_COMMAND="$SERVER_COMMAND java $JVM_MEMORY_OPTIONS -jar ./$HAM_CONVERT_PATH/$HAM_CONVERT_JAR $HC_BATCH_FILE aga$maxColors $hcExtraOptions $hcAnimOptions"
                    echo "EXECUTING: $HAM_CONVERT_COMMAND"
                    eval $HAM_CONVERT_COMMAND
                    ;;
                *)
                    echo "Error: color mode $colorMode with $maxColors colors not supported for $tool. Only 64, 128, 256 colors supported."
                    exit
                    ;;
            esac
        fi
    else
        echo "Error: batch file conversion not available for tool $conversionTool."
        exit
    fi
}

function SingleFileConversion {
    for pngfile in $tmpDir/*.png; do
        case $conversionTool in
            ham_convert)
                if [[ "$hamMode" == "yes" ]] || [[ "$colorMode" == "ehb" ]]; then
                    if [[ "$quietMode" == "no" ]]; then
                        echo "Converting $pngfile with '$conversionTool' using color mode '$colorMode':"
                    fi
                    COMMAND="$SERVER_COMMAND java $JVM_MEMORY_OPTIONS -jar ./$HAM_CONVERT_PATH/$HAM_CONVERT_JAR $pngfile $colorMode $hcExtraOptions"
                    eval $COMMAND
                else
                    # may add non-ham ocs modes ocs8,16,32 (12-bit color space) later
                    case $maxColors in
                        256|128|64)
                            if [[ "$quietMode" == "no" ]]; then
                                echo "Converting $pngfile with '$conversionTool' using "$maxColors" colors (24-bit color space):"
                            fi
                            COMMAND="$SERVER_COMMAND java $JVM_MEMORY_OPTIONS -jar ./$HAM_CONVERT_PATH/$HAM_CONVERT_JAR $pngfile aga$maxColors $hcExtraOptions"
                            eval $COMMAND
                            ;;
                        *)
                            echo "Error: color mode $colorMode or $maxColors colors not supported for $tool."
                            exit
                            ;;
                        
                    esac
                fi
                ;;
            ffmpeg)
                # nothing to do
                ;;
            *)
                echo "Error: unknown conversion tool ${conversionTool}."
                exit
        esac
    done
}

function ConvertVideoData {
    
    if [ "$skipFrameConversion" == "yes" ]; then
        echo "Skipping video data conversion."
    else
        if [[ $batchMode == "yes" ]]; then
            BatchFileConversion
        else
            SingleFileConversion
        fi
    fi
}

function EncodeCDXL {
    local convertedNamePrefix=frame${firstFrameNumber}
    case $conversionTool in
        ham_convert)
            firstFrameInputFile=${tmpDir}/${convertedNamePrefix}_output.iff
            checkHamConvertOutput $firstFrameInputFile
            ;;
        ffmpeg)
            firstFrameInputFile=${tmpDir}/${convertedNamePrefix}.png
            ;;
        *)
            echo "Error: cannot determine input for CDXL encoding. Unknown conversion tool $conversionTool."
            exit
    esac

    if [ $variableLengthFrames == "yes" ];then
        paddingSize=4
    else
        paddingSize=0
        if [[ "$hamMode" == "yes" ]] || [[ "$colorMode" == "ehb" ]]; then
	    fixedPlanesOption=""
	else
            fixedPlanesOption="--fixed-planes $planes"
	fi
    fi
    
    AGACONV_ENCODE_COMMAND="${AGACONV_ENCODE} --cdxl-encode --fps $framesPerSecond --pcm-file $audioOutFile --audio-mode $audioMode --gfx-mode $screenMode ${agaconvEncodeColorOption} ${agaconvEncodeStdCdxlOption} ${fixedPlanesOption} --frequency $frequency --cdxl-padding-size $paddingSize $firstFrameInputFile $outputFileName --status ${agaconvQuietModeOption} $DEBUG_OPTION"
    echo "EXECUTING: $AGACONV_ENCODE_COMMAND"
    eval $AGACONV_ENCODE_COMMAND
}

function SetInputVideoDimensions {
    inputVideoWidth=`ffprobe -v error -select_streams v:0 -show_entries stream=width -of csv=s=x:p=0 $inputFileName`
    inputVideoHeight=`ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=s=x:p=0 $inputFileName`
}

function ComputeVideoFps {
    inputVideoFpsExact=`ffprobe -v 0 -of csv=p=0 -select_streams v:0 -show_entries stream=r_frame_rate $inputFileName`
    inputVideoFpsFloat=`echo "scale=2;$inputVideoFpsExact" | bc`
    inputVideoFpsRounded=$( printf "%.0f" $inputVideoFpsFloat )
}

function ComputeOutputVideoDimensions {
    xyratio=`echo "scale=4; $inputVideoWidth/$inputVideoHeight"|bc`
    yxratio=`echo "scale=4; (1.0/$xyratio)"|bc`
#    echo "DEBUG: computed xyratio: $xyratio"
#    echo "DEBUG: computed 1/xyratio: $yxratio"
    if [ $scaleFactor -eq 0 ]; then
        case $monitorMode in
            keep_ratio)
                scaleFactor=1.00
                ;;
            amiga|aspect)
                scaleFactor=1.15
                ;;
            scale1080|fill1080)
                scaleFactor=1.24
                ;;
            scale1200|fill1200)
                scaleFactor=1.38
                ;;
            *)
                echo "Error: illegal monitor mode: $monitorMode"
                exit
                ;;
        esac
    fi
    outputVideoWidth=$width
    outputVideoHeight=`echo "(($outputVideoWidth*($yxratio*$scaleFactor)+0.5)/1)"|bc`

    case $screenMode in
        lores)
            ;;
        hires)
            let outputVideoHeight=outputVideoHeight/2
            ;;
        superhires)
            let outputVideoHeight=outputVideoHeight/4
            ;;
        *)
            echo "Error: unsupported screen mode: $screenMode."
            exit
    esac
    
    # ensure the computed video height is an even number
    if [ $((outputVideoHeight%2)) -eq 1 ]
    then
        let outputVideoHeight=outputVideoHeight-1
    fi
}

function AdjustStdCdxlFrequency {
    case $audioMode in
        mono)
            audioModeVal=1
        ;;
        stereo)
            audioModeVal=2
        ;;
        *)
            echo "Error: cannot adjust std cdxl audio with unknown audio mode: $audioMode."
            exit
    esac
        
    let oldFrequency=$frequency
    let divVal=$(($framesPerSecond*4/$audioModeVal))
    let frequencyFraction=$(( $frequency/ $divVal ))
    frequency=$(( $frequencyFraction*$divVal ))
    # frequency is now divisible by FPS and total audio size a multiple of 4
    if [[ $oldFrequency -ne $frequency ]];then
        # always chose higher quality frequency if adjustment is required
        frequency=$(( $frequency+$divVal ))
        echo "Standard CDXL optimization: adjusted $audioMode frequency from $oldFrequency to $frequency."
    fi
}

# MAIN FUNCTION
if [ "$#" -eq 0 ]; then
    PrintHelpMessage
    exit
fi

# check which tools are available
if [ -f ./agaconv-encode ]; then
    AGACONV_ENCODE=./agaconv-encode
else
    if [ type agaconv-encode 1> /dev/null 2> /dev/null ]; then
        AGACONV_ENCODE=agaconv-encode
    else
        echo "Error: agaconv-encode not available."
        exit
    fi
fi

if [ ! type ffmpeg 1> /dev/null 2> /dev/null ]; then
    echo "Error: ffmpeg not available."
    exit
fi

extractionTool="ffmpeg"
conversionTool="ffmpeg" # default
encodingTool="$AGACONV_ENCODE"
hcBlackBackgroundOption="black_bkd" # used for requesting black background

fileNameCounter=0

# command line parsing
for i in "$@"
do
    case $i in
        --in=*)
            echo "Option --in is deprecated. Use only filename (this allows to use TAB for auto-complete)."
            inputFileName="${i#*=}"
            fileNameCounter=$((fileNameCounter+1))
            shift
            ;;
        --out=*)
            echo "Option --out is deprecated. Use only filename (this allows to use TAB for auto-complete)."
            outputFileName="${i#*=}"
            fileNameCounter=$((fileNameCounter+1))
            shift
            ;;
        --tmp-dir=*)
            tmpDir="${i#*=}"
            shift
            ;;
        --tmp-dir-type=*)
            tmpDirType="${i#*=}"
            shift
            ;;
        --width=*)
            width="${i#*=}"
            shift
            ;;
        --height=*)
            height="${i#*=}"
            shift
            ;;
        --audio-out=*)
            audioOutFile="${i#*=}"
            shift
            ;;
        --max-colors=*)
            maxColors="${i#*=}"
            shift
            ;;
        --color-mode=*)
            colorMode="${i#*=}"
            shift
            ;;
        --dither=*)
            ffDitherMode="${i#*=}"
            hcDitherMode="${i#*=}"
            shift
            ;;
        --hc-dither=*)
            echo "Option --hc-dither is deprecated. Use option --dither instead."
            hcDitherMode="${i#*=}"
            ;;
        --ff-dither=*)
            echo "Option --ff-dither is deprecated. Use option --dither instead."
            ffDitherMode="${i#*=}"
            ;;
        --ff-bayer-scale=*)
            ffDitherBayerScale="${i#*=}"
            shift
            ;;
        --hc-propagation=*)
            hcPropagation="${i#*=}"
            shift
            ;;
        --hc-diversity=*)
            hcDiversity="${i#*=}"
            hcDiversityUserProvided=yes
            shift
            ;;
        --hc-ham-quality=*)
            hcHamQuality="${i#*=}"
            shift
            ;;
        --hc-quant=*)
            hcQuant="${i#*=}"
            shift
            ;;
        --screen-mode=*)
            screenMode="${i#*=}"
            shift
            ;;
        --color-bits=12)
            agaconvEncodeColorOption="--color-bits 12"
            shift
            ;;
        --color-bits=24)
            agaconvEncodeColorOption="--color-bits 24"
            shift
            ;;
        --extra=*)
            hcExtraOptions="${i#*=}"
            shift
            ;;
        --fps=*)
            framesPerSecond="${i#*=}"
            userProvidedFps=yes
            shift
            ;;
        --max-fps=*)
            maxFramesPerSecond="${i#*=}"
            shift
            ;;
        --frequency=*)
            frequency="${i#*=}"
            userProvidedFrequency=yes
            shift
            ;;
        --monitor-mode=*)
            monitorMode="${i#*=}"
            shift
            ;;
        --scale-factor=*)
            scaleFactor="${i#*=}"
            shift
            ;;
        --conversion-tool=*)
            conversionTool="${i#*=}"
            conversionToolUserRequested=yes
            shift
            ;;
        --quiet)
            agaconvQuietModeOption="--quiet"
            FFMPEG_QUIET_OPTIONS=$FFMPEG_QUIET_OPTIONS_ALL
            quietMode="yes"
            shift
            ;;
        --audio-mode=*)
            audioMode="${i#*=}"
            shift
            ;;
        --info-file)
            shift
            generateInfoFile=yes
            ;;
        --batch-mode=*)
            batchMode="${i#*=}"
            if [[ $batchMode != "yes" ]] && [[ $batchMode != "no" ]];then
                echo "Error: batch-mode=$batchMode - allowed values are: yes|no."
                exit
            fi
            shift
            ;;
        --fixed-frame-digits=*)
            fixedFrameDigits="${i#*=}"
            shift
            ;;
        --skip-frame-extraction)
            shift
            skipFrameExtraction=yes
            ;;
        --skip-frame-conversion)
            shift
            skipFrameConversion=yes
            ;;
        --dry-run)
            shift
            dryRun=yes
            ;;
        --no-cleanup)
            shift
            performCleanup=no
            ;;
        --version)
            shift
            printVersion
            exit
            ;;
        --info)
            printCdxlInfo=yes
            ;;
        --std-cdxl)
            variableLengthFrames=no
            agaconvEncodeColorOption="--color-bits 12"
            agaconvEncodeStdCdxlOption="--std-cdxl"
            stdCdxl="yes"
            ;;
        --std-cdxl24)
            variableLengthFrames=no
            agaconvEncodeColorOption="--color-bits 24"
            agaconvEncodeStdCdxlOption="--std-cdxl"
            stdCdxl="yes"
            ;;
        --debug)
            DEBUG_OPTION=--debug
            ;;
        --about)
            shift
            printVersion
            exit
            ;;
        --help)
            shift
            PrintHelpMessage
            exit
            ;;
        --help-extra)
            shift
            PrintHelpExtraMessage
            exit
            ;;
        *)
            if [[ $i == "-*" ]];then
                echo "Error: Unknown command line option: $i"
                exit
            fi
            prefix=$(expr substr $i 1 1)
            if [[ $prefix == "-" ]]; then
                echo "Error: unknown command line option: $i"
                exit
            fi
            fileNameCounter=$((fileNameCounter+1))
            if [[ $fileNameCounter -eq 1 ]];then
                inputFileName=$i;
            elif [[ $fileNameCounter -eq 2 ]];then
                outputFileName=$i;
            else
                echo "Error: more than two file names on command line: $i"
                exit
            fi
            ;;
    esac
done

# check if any file name was provided
if [[ $fileNameCounter -eq 0 ]];then
    echo "Error: no file name was provided."
    exit
fi

if [[ "$printCdxlInfo" == "yes" ]];then
    if [[ -z $inputFileName ]];then
        echo "Error: No input file name provided for option --cdxl-info."
        exit
    fi
    $AGACONV_ENCODE --cdxl-info $inputFileName
    exit
fi

# set default values for std cdxl if no user-provided values
if [[ $stdCdxl == "yes" ]];then
    if [[ $userProvidedFrequency == "no" ]];then
        frequency=11025
    fi
    if [[ $userProvidedFps == "no" ]];then
        framesPerSecond=15
    fi
fi

# check error propagation range and if supported dithering mode is selected (it is the default)
if [ $hcPropagation -lt 0 ] || [ $hcPropagation -gt 100 ]; then
    echo "Error: error propagation must be within 0..100 (provided:$hcPropagation)"
    exit
else
    if [[ $hcDitherMode == "fs" ]]; then
        hcPropagationOption=propagation_$hcPropagation
    else
        # all other modes cannot use propagation
        hcPropagationOption=
    fi
fi

# set different default values, if no user-provided value
if [ $hcHamQuality -eq 0 ] && [[ $colorMode = "ham8" ]]; then
    echo "Error: ham quality of 0 not supported for HAM8."
    exit
fi

if [ $maxColors -lt 6 ]; then
    echo "Error: minimum number of colors is 6, but only ${maxColors} requested."
    exit
fi

outputVideoWidth=$width

if [[ -z "$inputFileName" ]]
then
    echo "No input file name provided."
    exit
fi
if [[ -z "$outputFileName" ]]
then
    echo "No output file name provided."
    exit
fi

# check if input file exists

if [[ ! -f $inputFileName ]]; then
    echo "Error: file $inputFileName does not exist."
    exit
fi

EXTENSION="${inputFileName##*.}"
FILENAME=`basename ${inputFileName}`
bareFileName=${FILENAME%.*}

if [ "$colorMode" != "normal" ]
then
   maxColors="N/A"
fi

hamMode="no"

case $colorMode in
    ham6)
        planes=4 # fixed, no including control bits (used for palette size)
        maxColors="N/A"
        hcBlackBackgroundOption="black_bkd"
        hamMode="yes"
        # remove 24 bit colors option
        agaconvEncodeColorOption=
        if [[ $conversionToolUserRequested == "no" ]]; then
             conversionTool="ham_convert"
        fi
        ;;

    ham8)
        planes=8 # fixed
        maxColors="N/A"
        hamMode="yes"
        if [[ $conversionToolUserRequested == "no" ]]; then
             conversionTool="ham_convert"
        fi
        ;;
    ehb)
        planes=5 # fixed, no including EHB extra plane 
        maxColors="N/A" # 64 but restricted
        if [[ $hcDiversityUserProvided == "no " ]]; then
            hcDiversity=3 # set default value different to all other modes
        fi
        hcBlackBackgroundOption="black_bkd"
        # remove 24 bit colors option
        agaconvEncodeColorOption=
        if [[ $conversionToolUserRequested == "no" ]]; then
             conversionTool="ham_convert"
        fi
        ;;
    aga8|aga7|aga6|aga5|aga4|aga3)
        planes=$(expr substr $colorMode 4 1)
        maxColors=$((1<<$planes)) # number of planes to the power of 2
        ;;
    ocs5|ocs4|ocs3)
        planes=$(expr substr $colorMode 4 1)
        maxColors=$((1<<$planes)) # number of planes to the power of 2
        agaconvEncodeColorOption="--color-bits 12"
        ;;
    normal)
        planes=$(log2 $maxColors)
        ;;
    *)
        echo "Error: unknown color-mode: $colorMode."
        exit
esac

if [[ $conversionTool == "ham_convert" ]]; then
    case $hcDitherMode in
        bayer)
            hcDitherModeOption="dither"
            ;;
        fs)
            hcDitherModeOption="dither_fs"
            ;;
        none)
            # nothing to do
            ;;
        *)
            echo "Error: unknown dither option for ham_convert: $hcDither."
            exit
    esac

    case $hcDiversity in
        0|1|2|3|4|5|6)
            hcDiversityOption="diversity_$hcDiversity"
            ;;
        7|8|9)
            if [[ $colorMode != "ehb" ]]; then
                hcDiversityOption="diversity_$hcDiversity"
            else
                echo "Color mode ehb (extra-half bright) requires color diversity to be within 0..6 (provided: $hcDiversityOption)."
                exit
            fi
            ;;
        *)
            echo "Error: provided color diversity value out of range: $hcDiversity."
            exit
    esac
    if [[ $colorMode ==  "ham8" ]]; then
        # workaround1
        hcDiversityOption=
        # check for HAM8 quality mode
        if [ $hcHamQuality -lt 1 ]; then
            echo "Error: ham8 quality setting must be at least 1."
            exit
        fi
    fi

    case $hcHamQuality in
        0)
            hcHamQualityOption=ludicrous
            ;;
        1)
            hcHamQualityOption=fastest
            ;;
        2)
            hcHamQualityOption=fast
            ;;
        3)
            hcHamQualityOption=normal
            ;;
        4)
            hcHamQualityOption=slow
            ;;
        *)
            echo "Error: provided ham quality value out of range: $hcHamQuality."
            exit
            ;;
    esac
 
    case $hcQuant in
        wu)
            if [[ $hamMode == "yes" ]]; then
                hcQuantOption=quant_wu
            else
                hcQuantOption=
            fi
            ;;
        neuquant)
            if [[ $hamMode == "yes" ]]; then
                # for HAM neu_quant is default (and not specified on command line)
                hcQuantOption=
            else
                echo "Error: NeuQuant neural-net image quantization supported only in HAM mode."
                exit
            fi
            ;;
        *)
            echo "Error: unknown quantisation option: $hcQuant."
            exit
            ;;
    esac
         
    # compose command line option for ham_convert's ham/ehb modes
    if [[ $hamMode == "yes" ]]; then
        if [[ $hcHamQualityOption == "normal" ]]; then
            hcColorModeOption="${colorMode}"
        else
            hcColorModeOption="${colorMode}_${hcHamQualityOption}"
        fi
    elif [[ $colorMode == "ehb" ]]; then
        hcColorModeOption="ehb_animation"
        # only for EHB exists a special option in ham_convert. This variable remains unset otherwise.
        hcAnimOptions=
    fi
elif [[ $conversionTool == "ffmpeg" ]]; then
    case $ffDitherMode in
        none)
            ffDitherOptions=""
            ;;
        bayer)
            case $ffDitherBayerScale in
                0|1|2|3|4|5)
                    ffDitherOptions=":dither=bayer:bayer_scale=$ffDitherBayerScale"
                    ;;
                *)
                    echo "Error: ffmpeg dither bayer scale must be within 0..5 (provided: $ffDitherbayerScale)"
                    exit
            esac
            ;;
        *)
            echo "Error: unknown dither option for ffmpeg: $ffDitherMode"
            exit
            ;;
    esac
fi

hcExtraOptions="$hcBlackBackgroundOption $hcDitherModeOption $hcDiversityOption $hcQuantOption $hcPropagationOption norle nopng"

echo "Planes: $planes, maxColors=$maxColors"
ComputeVideoFps

# determine FPS to use
if [ "$framesPerSecond" -eq 0 ];then
    if [ $inputVideoFpsRounded -gt 0 ];then
        framesPerSecond=$inputVideoFpsRounded
    else
        framesPerSecond=25
    fi
    if [ $framesPerSecond -gt $maxFramesPerSecond ];then
        echo "Changing"
        framesPerSecond=$maxFramesPerSecond
    fi
fi

if [[ -z "$tmpDir" ]]; then
    tmpDirPrefix="tmp"
    case $tmpDirType in
        fn|file_name)
            tmpDir=$tmpDirPrefix-${bareFileName}
            ;;
        vp|video_properties)
            if [[ $maxColors == "N/A" ]]; then
                colorsEntry="$colorMode"
            else
                colorsEntry="$colorMode-$maxColors"
            fi
            colorsEntry+="-${screenMode}-${width}"
            case $conversionTool in
            ham_convert)
                if [[ $hamMode == "yes" ]]; then
                    colorsEntry+="-${hcHamQuality}"
                fi
                colorsEntry+="-${hcDitherMode}-${hcDiversity}-${hcQuant}"
                toolShort="hc"
                ;;
            ffmpeg)
                toolShort="ff"
                ;;
            *)
                echo "Error: unknown conversion tool in tmp file generation."
                exit
            esac
            tmpDir=$tmpDirPrefix-${bareFileName}-${monitorMode}-${colorsEntry}-${framesPerSecond}fps-${frequency}-${audioMode}-${toolShort}
            ;;
        unique)
            # create local tmp name for each sub process
            tmpBashPid=$BASHPID # requires bash 4+
            tmpDir=$tmpDirPrefix-${bareFileName}-${tmpBashPid}
            if hash openssl 2>/dev/null; then
                tmpCode=`openssl rand -hex 3`
                tmpDir+="-${tmpCode}"
            fi
            ;;
        *)
            echo "Error: unknown tmp directory type: $tmpDirType."
            exit
    esac
fi

# set batch mode
if [[ $conversionTool == "ffmpeg" ]]; then
    batchMode=no
fi

SetInputVideoDimensions
if [ "$height" != "auto" ]; then
    outputVideoWidth=$width
    outputVideoHeight=$height
else
    ComputeOutputVideoDimensions
fi

if [[ "$stdCdxl" == "yes" ]];then
    AdjustStdCdxlFrequency
fi

if [[ "$dryRun" == "yes" ]]; then
    echo
    echo "Performing dry-run. Only computing values."
else
    mkdir -p $tmpDir
    extractStartTime=$(date +%s.%N)
    ExtractAudioData
    ExtractVideoData
    extractEndTime=$(date +%s.%N)
    convertStartTime=$(date +%s.%N)
    ConvertVideoData
    convertEndTime=$(date +%s.%N)
    encodeStartTime=$(date +%s.%N)
    EncodeCDXL
    encodeEndTime=$(date +%s.%N)
fi

echo
echo "----------------------------------------------"
echo "AGAConv (script) Conversion Summary"
echo "----------------------------------------------"
printf "Input video dimensions : %4d x %4d\n" "$inputVideoWidth" "$inputVideoHeight"
printf "Output video dimensions: %4d x %4d\n" "$outputVideoWidth" "$outputVideoHeight"
printf "Scale factor           : %4.2f\n" "$scaleFactor"
printf "Input video FPS        : %5.2f\n" "$inputVideoFpsFloat"
echo "CDXL FPS               : $framesPerSecond"
if [[ "$hamMode" == "no" ]]; then
    case $conversionTool in
        ham_convert)
            echo "Planes per frame       : $planes"
            ;;
        ffmpeg)
            echo "Max colors per frame   : $maxColors"
            ;;
    esac
fi
echo "Color mode             : $colorMode"
echo "Screen mode            : $screenMode"
echo "Monitor mode           : $monitorMode"
if [[ $conversionTool == "ham_convert" ]];then
    if [[ $hamMode == "yes" ]];then
        echo "HAM Quality        (hc): $hcHamQuality"
    fi
    echo "Dither mode        (hc): $hcDitherMode"
    echo "Error Propagation  (hc): $hcPropagation"
    echo "Color diversity    (hc): $hcDiversity"
    echo "Quantisation mode  (hc): $hcQuant"
fi
echo "Audio frequency        : $frequency"
echo "Audio mode             : $audioMode"
echo "Extraction tool        : $extractionTool"
echo "Conversion tool        : $conversionTool"
echo "CDXL encoding tool     : $encodingTool"
echo "Temporary files path   : $tmpDir"
echo "Input filename         : $inputFileName"
echo "Output filename        : $outputFileName"

echo "----------------------------------------------"

if [[ $dryRun == "no" ]];then
   extractionTimeDiff=$(timeDiff $extractStartTime $extractEndTime)
   conversionTimeDiff=$(timeDiff $convertStartTime $convertEndTime)
   encodingTimeDiff=$(timeDiff $encodeStartTime $encodeEndTime)
   totalTimeSum=$(echo "$extractionTimeDiff + $conversionTimeDiff + $encodingTimeDiff" | bc)

   extractionTime=$(readableTime $extractionTimeDiff)
   conversionTime=$(readableTime $conversionTimeDiff)
   encodingTime=$(readableTime $encodingTimeDiff)
   totalTime=$(readableTime $totalTimeSum)
else
   extractionTime=$(readableTime 0)
   conversionTime=$(readableTime 0)
   encodingTime=$(readableTime 0)
   totalTime=$(readableTime 0)
fi    
      
case $conversionTool in
    ffmpeg)
        
        printf "Extraction + Conversion: %s (%s)\n" $extractionTime $extractionTool
        printf "Encoding time          : %s (%s)\n" $encodingTime $encodingTool
        printf "Total time             : %s\n" $totalTime
        ;;
    ham_convert)
        printf "Extraction time        : %s (%s)\n" $extractionTime $extractionTool
        printf "Conversion time        : %s (%s)\n" $conversionTime $conversionTool
        printf "Encoding time          : %s (%s)\n" $encodingTime $encodingTool
        printf "Total time             : %s\n" $totalTime
        ;;
    *)
        echo "Error: unknown conversion Tool $conversionTool"
        exit
        ;;
esac

echo "----------------------------------------------"

if [[ $dryRun == "no" ]];then
    if [[ $generateInfoFile == "yes" ]];then
        echo "extraction,$extractionTool,$extractionTime" > ${outputFileName}.txt
        echo "conversion,$conversionTool,$conversionTime" >> ${outputFileName}.txt
        echo "encoding,$encodingTool,$encodingTime" >> ${outputFileName}.txt
        echo "total,all,$totalTime" >> ${outputFileName}.txt
        echo "Generated info file ${outputFileName}.txt"
    fi
fi

# remove temporary files

if [[ $performCleanup == "yes" ]]; then
    echo -n "Removing temporary files .."
    rm -rf ${tmpDir}
    echo " done."
fi
